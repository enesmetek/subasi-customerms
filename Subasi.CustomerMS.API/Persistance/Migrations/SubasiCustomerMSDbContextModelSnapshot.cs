// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Subasi.CustomerMS.API.Persistance.Context;

#nullable disable

namespace Subasi.CustomerMS.API.Persistance.Migrations
{
    [DbContext(typeof(SubasiCustomerMSDbContext))]
    partial class SubasiCustomerMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Subasi.CustomerMS.API.Core.Domain.Concrete.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            ID = new Guid("ffab8c77-239f-4d24-ba12-5d9aca99dbb4"),
                            AddressLine = "Yavrukus St. No:19/1",
                            AddressType = "Home",
                            CustomerID = new Guid("46e61ab0-946a-4e6f-901b-9cc4a919c748"),
                            District = "Sisli",
                            Province = "Istanbul"
                        },
                        new
                        {
                            ID = new Guid("c1b4eeb9-dfec-4e38-b0e8-311db9edfec4"),
                            AddressLine = "Lalegul St. No:5",
                            AddressType = "Office",
                            CustomerID = new Guid("46e61ab0-946a-4e6f-901b-9cc4a919c748"),
                            District = "Kagithane",
                            Province = "Istanbul"
                        },
                        new
                        {
                            ID = new Guid("1f4cba7e-dd74-4e76-9a92-ca766a4b70d7"),
                            AddressLine = "Ali Riza Efendi St. No:22",
                            AddressType = "Home",
                            CustomerID = new Guid("58a451ed-ae3e-40fe-b118-708c0f9872f4"),
                            District = "Kesan",
                            Province = "Edirne"
                        },
                        new
                        {
                            ID = new Guid("7aff0742-36d6-4630-b1b4-68538ad56d64"),
                            AddressLine = "Seher St. No:16/60",
                            AddressType = "Home",
                            CustomerID = new Guid("611165a4-b4c1-4ce4-aca5-2d70ee35db5a"),
                            District = "Maltepe",
                            Province = "Istanbul"
                        });
                });

            modelBuilder.Entity("Subasi.CustomerMS.API.Core.Domain.Concrete.AppRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            ID = new Guid("b1803d37-f260-4135-afb2-b44ae26c58ed"),
                            Definition = "Admin"
                        },
                        new
                        {
                            ID = new Guid("0910659f-670a-47d2-aa00-6a343dbaae48"),
                            Definition = "Member"
                        });
                });

            modelBuilder.Entity("Subasi.CustomerMS.API.Core.Domain.Concrete.AppUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppRoleID");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Subasi.CustomerMS.API.Core.Domain.Concrete.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = new Guid("46e61ab0-946a-4e6f-901b-9cc4a919c748"),
                            Email = "emkafali@gmail.com",
                            FirstName = "Enes Mete",
                            LastName = "Kafali",
                            PhoneNumber = "553-580-9653"
                        },
                        new
                        {
                            ID = new Guid("58a451ed-ae3e-40fe-b118-708c0f9872f4"),
                            Email = "tktaskiran@gmail.com",
                            FirstName = "Tolga Kagan",
                            LastName = "Taskiran",
                            PhoneNumber = "546-602-3272"
                        },
                        new
                        {
                            ID = new Guid("7b6d363e-6fe9-4955-b8bb-36b4d535e3a6"),
                            Email = "temelatanc@gmail.com",
                            FirstName = "Can",
                            LastName = "Temelatan",
                            PhoneNumber = "533-559-0511"
                        },
                        new
                        {
                            ID = new Guid("29127229-8503-4e7b-b91f-249ef2a6161c"),
                            Email = "yildirimgul@gmail.com",
                            FirstName = "Yildirim",
                            LastName = "Gul",
                            PhoneNumber = "545-332-2239"
                        },
                        new
                        {
                            ID = new Guid("22d85348-00dc-4ec4-a5f4-e7db6dc5c652"),
                            Email = "kafali22@gmail.com",
                            FirstName = "Mustafa",
                            LastName = "Kafali",
                            PhoneNumber = "542-366-6688"
                        },
                        new
                        {
                            ID = new Guid("611165a4-b4c1-4ce4-aca5-2d70ee35db5a"),
                            Email = "mert@outlook.com",
                            FirstName = "Mert",
                            LastName = "Kafali",
                            PhoneNumber = "546-297-5518"
                        });
                });

            modelBuilder.Entity("Subasi.CustomerMS.API.Core.Domain.Concrete.Address", b =>
                {
                    b.HasOne("Subasi.CustomerMS.API.Core.Domain.Concrete.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Subasi.CustomerMS.API.Core.Domain.Concrete.AppUser", b =>
                {
                    b.HasOne("Subasi.CustomerMS.API.Core.Domain.Concrete.AppRole", "AppRole")
                        .WithMany("AppUsers")
                        .HasForeignKey("AppRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("Subasi.CustomerMS.API.Core.Domain.Concrete.AppRole", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("Subasi.CustomerMS.API.Core.Domain.Concrete.Customer", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
